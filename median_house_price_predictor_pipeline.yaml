# PIPELINE DEFINITION
# Name: median-house-price-predictor-pipeline
# Inputs:
#    data_bucket: str
#    dataset_uri: str
#    model_repo: str
#    project_id: str
#    thresholds_dict_str: str
#    trigger_id: str
# Outputs:
#    lr-model-evaluation-2-kpi: system.Metrics
#    lr-model-evaluation-2-metrics: system.Metrics
#    lr-model-evaluation-kpi: system.Metrics
#    lr-model-evaluation-metrics: system.Metrics
components:
  comp-compare-model:
    executorLabel: exec-compare-model
    inputDefinitions:
      parameters:
        rf_r2:
          parameterType: NUMBER_DOUBLE
        xgb_r2:
          parameterType: NUMBER_DOUBLE
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        condition-2:
          componentRef:
            name: comp-condition-2
          inputs:
            artifacts:
              pipelinechannel--train-xgboost-model:
                componentInputArtifact: pipelinechannel--train-xgboost-model
            parameters:
              pipelinechannel--compare-model-Output:
                componentInputParameter: pipelinechannel--compare-model-Output
              pipelinechannel--lr-model-evaluation-approval:
                componentInputParameter: pipelinechannel--lr-model-evaluation-approval
              pipelinechannel--model_repo:
                componentInputParameter: pipelinechannel--model_repo
              pipelinechannel--project_id:
                componentInputParameter: pipelinechannel--project_id
              pipelinechannel--trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: condition-2
          triggerPolicy:
            condition: inputs.parameter_values['pipelinechannel--lr-model-evaluation-approval']
              == true
    inputDefinitions:
      artifacts:
        pipelinechannel--train-xgboost-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        run-build-trigger:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger
          dependentTasks:
          - upload-model-to-gcs
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-xgboost-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-xgboost-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-3:
    dag:
      tasks:
        condition-4:
          componentRef:
            name: comp-condition-4
          inputs:
            artifacts:
              pipelinechannel--train-random-forest-model:
                componentInputArtifact: pipelinechannel--train-random-forest-model
            parameters:
              pipelinechannel--compare-model-Output:
                componentInputParameter: pipelinechannel--compare-model-Output
              pipelinechannel--lr-model-evaluation-2-approval:
                componentInputParameter: pipelinechannel--lr-model-evaluation-2-approval
              pipelinechannel--model_repo:
                componentInputParameter: pipelinechannel--model_repo
              pipelinechannel--project_id:
                componentInputParameter: pipelinechannel--project_id
              pipelinechannel--trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: condition-4
          triggerPolicy:
            condition: inputs.parameter_values['pipelinechannel--lr-model-evaluation-2-approval']
              == true
    inputDefinitions:
      artifacts:
        pipelinechannel--train-random-forest-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-2-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-condition-4:
    dag:
      tasks:
        run-build-trigger-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-run-build-trigger-2
          dependentTasks:
          - upload-model-to-gcs-2
          inputs:
            parameters:
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--trigger_id
          taskInfo:
            name: run-build-trigger-2
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-random-forest-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-random-forest-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-model-Output:
          parameterType: STRING
        pipelinechannel--lr-model-evaluation-2-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
        pipelinechannel--trigger_id:
          parameterType: STRING
  comp-importer:
    executorLabel: exec-importer
    inputDefinitions:
      parameters:
        uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-lr-model-evaluation:
    executorLabel: exec-lr-model-evaluation
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        thresholds_dict_str:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
      parameters:
        approval:
          parameterType: BOOLEAN
        r2:
          parameterType: NUMBER_DOUBLE
  comp-lr-model-evaluation-2:
    executorLabel: exec-lr-model-evaluation-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        thresholds_dict_str:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
      parameters:
        approval:
          parameterType: BOOLEAN
        r2:
          parameterType: NUMBER_DOUBLE
  comp-run-build-trigger:
    executorLabel: exec-run-build-trigger
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-run-build-trigger-2:
    executorLabel: exec-run-build-trigger-2
    inputDefinitions:
      parameters:
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
  comp-train-random-forest:
    executorLabel: exec-train-random-forest
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-xgboost:
    executorLabel: exec-train-xgboost
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-compare-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_model(xgb_r2: float, rf_r2: float) -> str:\n    import\
          \ logging\n    import sys\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
          \n    logging.info(f\"XGBoost R\xB2: {xgb_r2}\")\n    logging.info(f\"Random\
          \ Forest R\xB2: {rf_r2}\")\n\n    # Compare based on R\xB2\n    if xgb_r2\
          \ > rf_r2:\n        return \"XGB\"\n    else:\n        return \"RF\"\n\n"
        image: python:3.10.7-slim
    exec-importer:
      importer:
        artifactUri:
          runtimeParameter: uri
        typeSchema:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    exec-lr-model-evaluation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - lr_model_evaluation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'numpy' 'xgboost==1.6.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef lr_model_evaluation(\n    test_set: Input[Dataset],\n    model:\
          \ Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[Metrics],\n\
          \    kpi: Output[Metrics]\n) -> NamedTuple('outputs', [('approval', bool),\
          \ ('r2', float)]):\n    '''Evaluate the model and return approval and R\xB2\
          \ for comparison'''\n\n    import pandas as pd\n    import logging     \n\
          \    from sklearn.metrics import mean_squared_error, mean_absolute_error,\
          \ r2_score\n    import json\n    import pickle\n    import numpy as np\n\
          \n    logging.basicConfig(level=logging.INFO)\n\n    # Load test data\n\
          \    data = pd.read_csv(test_set.path + \".csv\")\n\n    # Load the saved\
          \ model (XGBoost or RandomForest)\n    m_filename = model.path + \".pkl\"\
          \n    model = pickle.load(open(m_filename, 'rb'))\n\n    # Prepare the test\
          \ features and target variable\n    X_test = data.drop(columns=[\"Median_House_Value\"\
          ])\n    y_true = data['Median_House_Value']\n\n    # Make predictions\n\
          \    y_pred = model.predict(X_test)\n\n    # Calculate R\xB2 score\n   \
          \ r2 = r2_score(y_true, y_pred)\n\n    logging.info(f\"R\xB2: {r2}\")\n\n\
          \    # Log metrics for future analysis\n    metrics.log_metric(\"R2\", r2)\n\
          \    kpi.log_metric(\"R2\", r2)\n\n    # Parse the threshold dictionary\
          \ for R\xB2 threshold\n    thresholds_dict = json.loads(thresholds_dict_str)\n\
          \    r2_threshold = thresholds_dict.get('r2', 0.7)  # Default R\xB2 threshold\
          \ is 0.7 if not specified\n\n    # Check if R\xB2 meets the threshold for\
          \ approval\n    approval_value = bool(r2 >= r2_threshold)\n    logging.info(f\"\
          Approval based on R\xB2: {approval_value} (R\xB2: {r2}, Threshold: {r2_threshold})\"\
          )\n\n    # Return both approval status and R\xB2 for further use in the\
          \ pipeline\n    return approval_value, r2\n\n"
        image: python:3.10.7-slim
    exec-lr-model-evaluation-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - lr_model_evaluation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'numpy' 'xgboost==1.6.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef lr_model_evaluation(\n    test_set: Input[Dataset],\n    model:\
          \ Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[Metrics],\n\
          \    kpi: Output[Metrics]\n) -> NamedTuple('outputs', [('approval', bool),\
          \ ('r2', float)]):\n    '''Evaluate the model and return approval and R\xB2\
          \ for comparison'''\n\n    import pandas as pd\n    import logging     \n\
          \    from sklearn.metrics import mean_squared_error, mean_absolute_error,\
          \ r2_score\n    import json\n    import pickle\n    import numpy as np\n\
          \n    logging.basicConfig(level=logging.INFO)\n\n    # Load test data\n\
          \    data = pd.read_csv(test_set.path + \".csv\")\n\n    # Load the saved\
          \ model (XGBoost or RandomForest)\n    m_filename = model.path + \".pkl\"\
          \n    model = pickle.load(open(m_filename, 'rb'))\n\n    # Prepare the test\
          \ features and target variable\n    X_test = data.drop(columns=[\"Median_House_Value\"\
          ])\n    y_true = data['Median_House_Value']\n\n    # Make predictions\n\
          \    y_pred = model.predict(X_test)\n\n    # Calculate R\xB2 score\n   \
          \ r2 = r2_score(y_true, y_pred)\n\n    logging.info(f\"R\xB2: {r2}\")\n\n\
          \    # Log metrics for future analysis\n    metrics.log_metric(\"R2\", r2)\n\
          \    kpi.log_metric(\"R2\", r2)\n\n    # Parse the threshold dictionary\
          \ for R\xB2 threshold\n    thresholds_dict = json.loads(thresholds_dict_str)\n\
          \    r2_threshold = thresholds_dict.get('r2', 0.7)  # Default R\xB2 threshold\
          \ is 0.7 if not specified\n\n    # Check if R\xB2 meets the threshold for\
          \ approval\n    approval_value = bool(r2 >= r2_threshold)\n    logging.info(f\"\
          Approval based on R\xB2: {approval_value} (R\xB2: {r2}, Threshold: {r2_threshold})\"\
          )\n\n    # Return both approval status and R\xB2 for further use in the\
          \ pipeline\n    return approval_value, r2\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n   import\
          \ sys\n   from google.cloud.devtools import cloudbuild_v1    \n   import\
          \ logging \n   logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n   # Create a client\n   client = cloudbuild_v1.CloudBuildClient()\n\
          \   name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n   # Initialize request argument(s)\n   request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n       project_id=project_id,\n       trigger_id=trigger_id,\n\
          \       name=name\n   )\n\n   # Make the request\n   operation = client.run_build_trigger(request=request)\n\
          \n   logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-run-build-trigger-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_build_trigger
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-build'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_build_trigger(project_id:str, trigger_id:str):\n   import\
          \ sys\n   from google.cloud.devtools import cloudbuild_v1    \n   import\
          \ logging \n   logging.basicConfig(stream=sys.stdout, level=logging.INFO)\
          \ \n\n   # Create a client\n   client = cloudbuild_v1.CloudBuildClient()\n\
          \   name = f\"projects/{project_id}/locations/us-central1/triggers/{trigger_id}\"\
          \n   # Initialize request argument(s)\n   request = cloudbuild_v1.RunBuildTriggerRequest(\
          \        \n       project_id=project_id,\n       trigger_id=trigger_id,\n\
          \       name=name\n   )\n\n   # Make the request\n   operation = client.run_build_trigger(request=request)\n\
          \n   logging.info(\"Trigger the CI-CD Pipeline: \" + trigger_id)\n\n"
        image: python:3.10.7-slim
    exec-train-random-forest:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_random_forest
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_random_forest(features: Input[Dataset], model: Output[Model]):\n\
          \    '''Train a Random Forest Regressor model with specific parameters'''\n\
          \    import pandas as pd\n    from sklearn.ensemble import RandomForestRegressor\
          \  # Import Random Forest Regressor\n    import pickle \n\n    # Load the\
          \ dataset from the CSV file\n    data = pd.read_csv(features.path + \".csv\"\
          )\n\n    # Initialize a Random Forest Regressor model with the specified\
          \ parameters\n    model_rf = RandomForestRegressor(\n        n_estimators=100,\
          \   # Number of trees in the forest\n        max_depth=10        # Maximum\
          \ depth of each tree\n    )\n\n    # Train the model using all columns except\
          \ 'Median_House_Value' as features\n    model_rf.fit(data.drop('Median_House_Value',\
          \ axis=1), data['Median_House_Value'])\n\n    # Add metadata to indicate\
          \ the model is a Random Forest Regressor model\n    model.metadata[\"framework\"\
          ] = \"RandomForest\"\n\n    # Save the trained model as a pickle file\n\
          \    file_name = model.path + \".pkl\"\n    with open(file_name, 'wb') as\
          \ file:  \n        pickle.dump(model_rf, file)\n\n"
        image: python:3.10.7-slim
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(dataset: Input[Dataset], dataset_train: Output[Dataset],\
          \ dataset_test: Output[Dataset]):\n    '''train_test_split'''\n    import\
          \ pandas as pd\n    import logging \n    import sys\n    from sklearn.model_selection\
          \ import train_test_split as tts\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO) \n\n    alldata = pd.read_csv(dataset.path, index_col=None)\n\
          \    train, test = tts(alldata, test_size=0.25)\n    train.to_csv(dataset_train.path\
          \ + \".csv\" , index=False, encoding='utf-8-sig')\n    test.to_csv(dataset_test.path\
          \ + \".csv\" , index=False, encoding='utf-8-sig')\n\n"
        image: python:3.10.7-slim
    exec-train-xgboost:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_xgboost
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'xgboost==1.6.0'\
          \ 'scikit-learn==1.3.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_xgboost(features: Input[Dataset], model: Output[Model]):\n\
          \    '''Train an XGBoost Regression model with specific parameters'''\n\
          \    import pandas as pd\n    from xgboost import XGBRegressor  # Import\
          \ XGBoost Regressor\n    import pickle \n\n    # Load the dataset from the\
          \ CSV file\n    data = pd.read_csv(features.path + \".csv\")\n\n    # Initialize\
          \ an XGBoost Regressor model with the specified parameters\n    model_xgb\
          \ = XGBRegressor(\n        alpha=10,            # Regularization term (L1)\n\
          \        reg_lambda=20,       # Regularization term (L2)\n        learning_rate=0.1,\
          \   # Step size shrinkage\n        n_estimators=500     # Number of boosting\
          \ rounds (trees)\n    )\n\n    # Train the model using all columns except\
          \ 'Median_House_Value' as features\n    model_xgb.fit(data.drop('Median_House_Value',\
          \ axis=1), data['Median_House_Value'])\n\n    # Add metadata to indicate\
          \ the model is an XGBoost Regressor model\n    model.metadata[\"framework\"\
          ] = \"XGBoost\"\n\n    # Save the trained model as a pickle file\n    file_name\
          \ = model.path + \".pkl\"\n    with open(file_name, 'wb') as file:  \n \
          \       pickle.dump(model_xgb, file)\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('lr_model.pkl')\n    source_file_name= model.path\
          \ + '.pkl'\n\n    blob.upload_from_filename(source_file_name)    \n\n  \
          \  print(f\"File {source_file_name} uploaded to {model_repo}.\")\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('lr_model.pkl')\n    source_file_name= model.path\
          \ + '.pkl'\n\n    blob.upload_from_filename(source_file_name)    \n\n  \
          \  print(f\"File {source_file_name} uploaded to {model_repo}.\")\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: median-house-price-predictor-pipeline
root:
  dag:
    outputs:
      artifacts:
        lr-model-evaluation-2-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: lr-model-evaluation-2
        lr-model-evaluation-2-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: lr-model-evaluation-2
        lr-model-evaluation-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: lr-model-evaluation
        lr-model-evaluation-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: lr-model-evaluation
    tasks:
      compare-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-model
        dependentTasks:
        - lr-model-evaluation
        - lr-model-evaluation-2
        inputs:
          parameters:
            rf_r2:
              taskOutputParameter:
                outputParameterKey: r2
                producerTask: lr-model-evaluation-2
            xgb_r2:
              taskOutputParameter:
                outputParameterKey: r2
                producerTask: lr-model-evaluation
        taskInfo:
          name: compare-model
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-model
        - lr-model-evaluation
        - train-xgboost
        inputs:
          artifacts:
            pipelinechannel--train-xgboost-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-xgboost
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--lr-model-evaluation-approval:
              taskOutputParameter:
                outputParameterKey: approval
                producerTask: lr-model-evaluation
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'XGB'
      condition-3:
        componentRef:
          name: comp-condition-3
        dependentTasks:
        - compare-model
        - lr-model-evaluation-2
        - train-random-forest
        inputs:
          artifacts:
            pipelinechannel--train-random-forest-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-random-forest
          parameters:
            pipelinechannel--compare-model-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-model
            pipelinechannel--lr-model-evaluation-2-approval:
              taskOutputParameter:
                outputParameterKey: approval
                producerTask: lr-model-evaluation-2
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
            pipelinechannel--trigger_id:
              componentInputParameter: trigger_id
        taskInfo:
          name: condition-3
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-model-Output']
            == 'RF'
      importer:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-importer
        inputs:
          parameters:
            uri:
              componentInputParameter: dataset_uri
        taskInfo:
          name: importer
      lr-model-evaluation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-lr-model-evaluation
        dependentTasks:
        - train-test-split
        - train-xgboost
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-xgboost
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            thresholds_dict_str:
              componentInputParameter: thresholds_dict_str
        taskInfo:
          name: lr-model-evaluation
      lr-model-evaluation-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-lr-model-evaluation-2
        dependentTasks:
        - train-random-forest
        - train-test-split
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-random-forest
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            thresholds_dict_str:
              componentInputParameter: thresholds_dict_str
        taskInfo:
          name: lr-model-evaluation-2
      train-random-forest:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-random-forest
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-random-forest
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - importer
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-test-split
      train-xgboost:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-xgboost
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-xgboost
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_uri:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
      thresholds_dict_str:
        parameterType: STRING
      trigger_id:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      lr-model-evaluation-2-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      lr-model-evaluation-2-metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      lr-model-evaluation-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      lr-model-evaluation-metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
